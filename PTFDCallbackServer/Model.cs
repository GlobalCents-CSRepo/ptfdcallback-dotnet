// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PTFDCallbackServer;
//
//    var pipeline = Pipeline.FromJson(jsonString);

namespace PTFDCallbackServer
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Pipeline
    {
        [JsonProperty("request")]
        public CallbackRequest Request { get; set; }

        [JsonProperty("response")]
        public CallbackResponse Response { get; set; }
    }

    public partial class CallbackRequest
    {
        /// <summary>
        /// The DataID of the builder.
        /// </summary>
        [JsonProperty("builderid")]
        public string Builderid { get; set; }

        /// <summary>
        /// The file path to the document
        /// </summary>
        [JsonProperty("documentpath")]
        public string Documentpath { get; set; }

        /// <summary>
        /// The metadata associated to the document
        /// </summary>
        [JsonProperty("metadata")]
        public object Metadata { get; set; }
    }

    public partial class CallbackResponse
    {
        /// <summary>
        /// the file path to the document
        /// </summary>
        [JsonProperty("documentpath")]
        public string Documentpath { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public Status? Status { get; set; }

        [JsonProperty("statusmsg")]
        public string Statusmsg { get; set; }
    }

    public enum Status { Error, Ok, Unchanged };

    public partial class Pipeline
    {
        public static Pipeline FromJson(string json) => JsonConvert.DeserializeObject<Pipeline>(json, PTFDCallbackServer.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Pipeline self) => JsonConvert.SerializeObject(self, PTFDCallbackServer.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                StatusConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Error":
                    return Status.Error;
                case "Ok":
                    return Status.Ok;
                case "Unchanged":
                    return Status.Unchanged;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Status)untypedValue;
            switch (value)
            {
                case Status.Error:
                    serializer.Serialize(writer, "Error");
                    return;
                case Status.Ok:
                    serializer.Serialize(writer, "Ok");
                    return;
                case Status.Unchanged:
                    serializer.Serialize(writer, "Unchanged");
                    return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }
}
